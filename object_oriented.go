
// 面向对象编程
/*
	一个程序就是一个世界，有很多对象（变量）

	Go面向对象编程
		1.Go也支持面向对象面呈（OOP），但是和传统的面向对象编程有区别，并不是
		纯粹的面向对象语言。所以我们说Go支持面向对象编程特性是比较准确的

		2.Go没有类（class），Go语言的结构体（struct）和其他编程语言的类（class）
		有同等的低位，你可以理解Go是基于struct来实现OOP特性的

		3.Go面向对象编程非常简洁，去掉了传统OOP语言的继承、方法重载、构造函数和
		析构函数、隐藏的this指针等等

		4.Go仍然有面向对象编程的继承，封装和多态的特性，只是实现方式和其他OOP语言
		不一样，比如继承：Go没有extends关键字，继承是通过匿名字段来实现

		5.Go面向对象（OOP）很优雅，OOP本身就是语言类型系统（type system）的一部分，
		通过这个接口（interface）关联，耦合性低，也非常灵活。Go中面向对象编程是非常
		重要的特性

	结构体
		结构体和结构体变量（实例）的区别和联系

			1.结构体是自定义的数据类型，代表一类事物
			2.结构体变量（实例）是具体的，实际的，代表一个具体变量

		如何声明结构体
			type 结构体名称 struct {
				field1 type
				field2 type
			}

		注意事项和细节说明
			1.字段声明语法同变量，示例：字段名 字段类型
			
			2.字段的类型可以为：基本类型、数组或引用类型
			
			3.在创建一个结构体变量后，如果没有给字段赋值，都对应一个零值（默认值）
				1）布尔类型是false
				2）数值是0
				3）字符串是""
				4）如果结构体的字段类型是：指针，slice和map的零值都是nil，即还没有分配空间
				如果需要使用这样的字段，需要先make，才能使用

			4.不同结构体变量的字段是独立的，互不影响，一个结构体变量字段的更改，不影响另外一个，结构体是值类型

	创建结构体实例的四种方式
		方式一：
			var p1 Person

		方式二：
			p2 := Person{"mary", 20}

		方式三：
			var p3 *Person = new(Person)
			因为p3是一个指针，因此标准的给字段赋值方式：(*p3).Name = "smith"
			也可以这样写p3.Name = "smith"，原因：go的设计者为了程序员更加方便，底层会对p3.Name = "smith"进行处理，
			会给p3加上取值运算(*p3).Name = "smith"
*/