
// 函数
/*
	为什么需要函数？
		避免代码冗余
		不利于代码维护
		函数可以解决这个问题

	定义：
		为完成某一功能的程序指令（语句）的集合，称为函数。
		在Go中，函数分为：自定义函数、系统函数（查看Go编程手册）

	基本语法：
		func 函数名（形参列表）（返回值列表）{
			执行语句...
			return 返回值列表
		}

		1.形参列表：表示函数的输入
		2.函数中的语句：表示为了实现某一功能代码块
		3.函数可以有返回值，也可以没有参数

	函数调用的底层分析：
		栈区：基本数据类型一般会分配到栈区，编译器存在逃逸分析
		堆区：引用数据类型一般说分配到堆区，比如map、slice
		代码区：代码存放在这

	return：
		Go函数支持返回多个值，类似lua
		func 函数名（形参列表）（返回值类型列表）{
			语句...
			return返回值列表
		}
		1）如果返回多个值，在接收时，希望忽略某个返回值，则使用 _符号表示占位忽略
		2）如果返回值只有一个，（返回值类型列表）可以不写（）括号

	递归：
		一个函数在函数体内又调用了本身，我们称为递归调用

		函数递归需要遵守的重要原则：
			1）执行一个函数时，就创建一个新的受保护的独立空间（新函数栈）
			2）函数的局部变量是独立，互不影响
			3）递归必须向退出递归的条件逼近，否则就是无限递归，死龟了...
			4）当一个函数执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，
			   同时当函数执行完毕或者返回时，该函数本身也会被系统销毁

	函数的注意事项和细节：
		1）函数的形参列表可以是多个，返回值列表也可以是多个
		2）形参列表和返回值列表的数据类型可以是值类型和引用类型
		3）函数的命名遵循标识符命名规范，首字母不能是数字，首字母大写该函数可以被本包文件和其他包文件使用，类似public，首字母小写，只能被本包文件使用，其他包文件不能使用，类似private
		4）函数中的变量是局部的，函数外不生效
		5）基本数据类型和数据默认都是值传递，即进行值拷贝。在函数内修改，不会影响到原来的值
		6）如果希望函数内的变量能修改函数外的变量，可以传入变量的地址&，函数内以指针的方式操作变量
		7）Go不支持传统的函数重载
		8）在Go中，函数也是一种数据类型，可以赋值给一个变量，则该变量就是一个函数类型的变量了。通过该变量可以对函数调用。
		9）函数既然是一种数据类型，因此在Go中，函数可以作为形参，并且调用
		10）为了简化数据类型定义，Go支持自定义数据类型
			基本语法：type 自定义数据类型名 数据类型 // 理解：相当于一个别名
			案例：type myInt int // 这时myInt就等价int来使用了
			案例：type mySum func(int, int) int // 这时mySum就等价一个函数类型func(int, int) int
		11）支持对函数返回值命名
			func cal(n1 int, n2 int) (sum int, sub int) {
				sum = n1 + n2
				sub = n1 - n2
				return
			}
		12）使用 _ 标识符，忽略返回值
		13）Go支持可变参数，可变参数必须放在形参列表的最后
			1.支持0到多个参数
				func sum(args... int) sum int { }
			2.支持1到多个参数
				func sum(n1 int, args... int) sum int { }
		14）如果形参的类型是一样的，则前面参数的类型可以省略，类似func sum(n1, n2 float32) float32 { }
*/	