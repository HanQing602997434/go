
// 函数
/*
	为什么需要函数？
		避免代码冗余
		不利于代码维护
		函数可以解决这个问题

	定义：
		为完成某一功能的程序指令（语句）的集合，称为函数。
		在Go中，函数分为：自定义函数、系统函数（查看Go编程手册）

	基本语法：
		func 函数名（形参列表）（返回值列表）{
			执行语句...
			return 返回值列表
		}

		1.形参列表：表示函数的输入
		2.函数中的语句：表示为了实现某一功能代码块
		3.函数可以有返回值，也可以没有参数

	函数调用的底层分析：
		栈区：基本数据类型一般会分配到栈区，编译器存在逃逸分析
		堆区：引用数据类型一般说分配到堆区，比如map、slice
		代码区：代码存放在这

	return：
		Go函数支持返回多个值，类似lua
		func 函数名（形参列表）（返回值类型列表）{
			语句...
			return返回值列表
		}
		1）如果返回多个值，在接收时，希望忽略某个返回值，则使用 _符号表示占位忽略
		2）如果返回值只有一个，（返回值类型列表）可以不写（）括号

	递归：
		一个函数在函数体内又调用了本身，我们称为递归调用

		函数递归需要遵守的重要原则：
			1）执行一个函数时，就创建一个新的受保护的独立空间（新函数栈）
			2）函数的局部变量是独立，互不影响
			3）递归必须向退出递归的条件逼近，否则就是无限递归，死龟了...
			4）当一个函数执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，
			   同时当函数执行完毕或者返回时，该函数本身也会被系统销毁
*/	