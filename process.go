
// 流程控制
/*
	三大流程控制：
		1.顺序控制
			程序从上到下逐行执行，中间没有任何判断和跳转

		2.分支控制
			让程序有选择的执行，分三种
				1）单分支
					if 条件表达式 {
						执行代码块
					}

					Go支持在if语句中定义一个变量

				2）双分支
					if 条件表达式 {
						执行代码块
					} else {
						执行代码块
					}

					双分支只会执行其中的一个分支

				3）多分支控制
					if 条件表达式1 {
						执行代码块1
					} else if 条件表达式2 {
						执行代码块2
					} 
					... else {
						执行代码块n
					}

					多分支最多只会执行一个分支
					if 后面的表达式不允许是一个赋值语句

				4）嵌套分支
					if 条件表达式 {
						if 条件表达式 {
							if ...
						}
					}

				5）switch分支控制
					switch 表达式 {
					case 表达式1，表达式2，...:
						语句块1
					case 表达式3，表达式4，...:
						语句块2
					// 这里可以有多个case语句

					default:
						语句块
					}

					细节：
						1）case后面是一个表达式，可是常量、变量、一个带有返回值的函数
						2）case后的各个表达式的值的数据类型，必须和switch的表达式数据类型一致
						3）case后面可以待多个表达式，使用逗号间隔。比如case表达式1，表达式2...
						4）case后面如果是常量值，要求不能重复
						5）case后面不需要带break，程序匹配到一个case后就会执行对应的代码块，然后退出switch，如果一个都匹配不到，则执行default
						6）default语句不是必须有的
						7）switch后也可以不带表达式，类似if-else分支来使用
						8）switch后也可以直接声明/定义一个变量，分号结束，不推荐
						9）switch穿透-fallthrough，如果在case语句块后增加fallthrough，则会继续执行下一个case，也叫switch穿透，只能穿透一层
						10）Type Switch: switch语句还可以被用于type-switch来判断某个interface变量中实际指向的变量类型

				6）switch和if的比较
					1）如果判断的具体数值不多，而且符合整数、浮点数、字符、字符串这几种类型。建议使用switch语句，简洁高效。
					
					2）其他情况：对区间判断和结果为bool类型的判断，使用if，if的使用范围更广。

		3.循环控制
*/ 	