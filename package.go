
// 包的引出和使用
/*
	包的引出：
		1.在不同的文件中定义函数，让其他文件来调用。

		2.不同的需求写在不同的文件中。

	包的本质：
		本质实际上就是创建不同的文件夹，来存放程序文件。

	包的三大作用：
		1.区分相同名字的函数、变量等标识符
		2.当程序文件很多时，可以很好的管理项目
		3.控制函数、变量等访问范围，即作用域

	导入包：
		src下面的路径：例：导入utils包，"code/func/utils"

	包中函数调用：
		包名.函数名，函数名首字母大写表示公有，首字母小写表示私有

	包的注意事项和细节说明
		1.在给一个文件打包时，该包对应一个文件夹，比如这里的utils文件夹对应的包名就是utils，
		文件的包名通常和文件所在的文件夹名一致，一般为小写字母。

		2.当一个文件要使用其他函数或变量时，需要先引入对应的包

		3.package指令在文件第一行，然后是import指令

		4.在import包时，路径从$GOPATH的src下开始，不用带src，编译器会自动从src下开始引入

		5.给包取一个别名 ut "code/func/utils"，之前的包名不再可用

		6.在同一个包下，不能有相同的函数名（也不能有相同的全局变量名），否则报重复定义错误

		7.如果你要编译成一个可执行程序文件，就需要将这个包声明为main，即package main。这是
		一个语法规范，如果你是写一个库，包名可以自定义。
			1）编译的指令，在项目目录下，编译路径不需要带src，编译器会自动带
			2）编译时需要编译main包所在的文件夹
			3）项目的目录结构最好按照规范来组织
			4）编译后生成一个有默认名的可执行文件，在$GOPATH目录下，可以指定名字和目录，比如：
			   放在bin目录下：D:\PROJECT>go build -o bin/my.exe code/func/main
*/