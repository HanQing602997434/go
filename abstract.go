
// 抽象
/*
	如何理解抽象
		我们在前面去定义一个结构体时候，实际上就是把一类十五的共有属性(字段)
		和行为(方法)提取出来，形成一个物理模型(模板)。这种研究问题的方法称为
		抽象。
		
	封装
		封装就是把抽象出的字段和对字段的操作封装在一起，数据被保护在内部，程序
		的其他包只能通过被授权的操作(方法)，才能对字段进行操作

		封装的理解和好处
			1）隐藏实现细节
			2）可以对数据进行验证，保证安全合理

		如何体现封装
			1）对结构体中的属性进行封装
			2）通过方法、包实现封装

		封装的实现步骤
			1）将结构体、字段(属性)的首字母小写(不能导出了，其他包不能使用，类似private)
			2）给结构体所在包提供一个工厂模式的函数，首字母大写。类似一个构造函数
			3）提供一个首字母大写的Set方法(类似其它语言的public)，用于对属性判断并赋值
				func (var 结构体类型名)SetXxx(参数列表) (返回值列表) {
					// 假如数据验证的业务逻辑
					var.字段 = 参数
				}
			4）提供一个首字母大写的Get方法(类似其它语言的public)，用于获取属性的值
				func (var 结构体类型名)
			特别说明：在Go开发中并没有特别强调封装

	继承
		
*/	